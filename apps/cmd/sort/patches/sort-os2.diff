diff -urwN so-x/kitten/kitten.c so-o/kitten/kitten.c
--- so-x/kitten/kitten.c	2023-03-30 15:49:16.570298866 +0300
+++ so-o/kitten/kitten.c	2023-01-08 21:46:45.741950934 +0300
@@ -24,12 +24,15 @@
 #include <string.h>			/* strchr */
 #include <fcntl.h>
 #include <dos.h>
-#include <sys/stat.h>
-#include <sys/types.h>
+#include <io.h>                         /* read, write, close */
+
+/* assert we are running in small model */
+/* else pointer below has to be done correctly */
+/* char verify_small_pointers[sizeof(void*) == 2 ? 1 : -1]; */
 
 #include "kitten.h"
 
-char catcontents[6144];	/* *** Maximum size of PROGRAM.%LANG% file *** */
+char catcontents[8192];
 
 struct catstring{
   char key1;
@@ -39,7 +42,7 @@
 
 typedef struct catstring catstring_t;
 
-catstring_t catpoints[128];		/* max 128 strings can be defined... */
+catstring_t catpoints[128];
 
 
 /* Local prototypes */
@@ -59,67 +62,12 @@
 nl_catd _kitten_catalog = 0;	/* _kitten_catalog descriptor or 0 */
 char catfile[128];		/* full path to _kitten_catalog */
 
-char getlbuf[1024]; /* read buffer (better speed) -- 7/2004: 1k, not 8k */
+char getlbuf[8192]; /* read buffer for better speed  */
 char * getlp;       /* current point in buffer       */
 int getlrem = -1;   /* remaining bytes in buffer     */
+char lastcr = 0;    /* for 2byte CR LF sequences     */
 
 
-#if defined(__TURBOC__)
-/* DOS handle based file usage */
-
-int dos_open(char *filename, int mode)
-{
-	union REGS r;
-        struct SREGS s;
-	(void)mode;		/* mode ignored - readonly supported */
-	r.h.ah = 0x3d;
-	r.h.al = 0;		/* read mode only supoported now !! */
-	r.x.dx = FP_OFF(filename);
-        s.ds = FP_SEG(filename);
-	intdosx(&r,&r,&s);
-	return ( (r.x.cflag) ? -1 : r.x.ax );
-}
-
-
-int dos_read(int file, void *ptr, unsigned count)
-{
-	union REGS r;
-        struct SREGS s;
-	r.h.ah = 0x3f;
-	r.x.bx = file;
-	r.x.cx = count;
-	r.x.dx = FP_OFF(ptr);
-        s.ds = FP_SEG(ptr);
-	intdosx(&r,&r,&s);
-	return ( (r.x.cflag) ? 0 : r.x.ax );
-}
-
-
-int dos_write(int file, void *ptr, unsigned count)
-{
-	union REGS r;
-	struct SREGS s;
-	r.h.ah = 0x40;
-	r.x.bx = file;
-	r.x.cx = count;
-	r.x.dx = FP_OFF(ptr);
-        s.ds = FP_SEG(ptr);
-	intdosx(&r,&r,&s);
-	return ( (r.x.cflag) ? 0 : r.x.ax );
-}
-
-
-void dos_close(int file)
-{
-	union REGS r;
-	r.h.ah = 0x3e;
-	r.x.bx = file;
-	intdos(&r,&r);
-}
-#else
-#include <unistd.h>
-#endif
-
 
 /* Functions */
 
@@ -129,7 +77,7 @@
  * On failure, catgets() returns the value 'message'.
  */
 
-const char *kittengets(int setnum, int msgnum, const char *message)
+char * kittengets(int setnum, int msgnum, char * message)
 {
 
   int i = 0;
@@ -164,22 +112,26 @@
   /* Open the _kitten_catalog file */
   /* The value of `_kitten_catalog' will be set based on catread */
 
+
   if (_kitten_catalog) { /* Already one open */
-    write(1,"cat already open\r\n",strlen("cat already open\r\n"));
+    fprintf(stderr,"cat already open\r\n");
     return (-1);
   }
 
+
   for (i=0; i<128; i++)
     catpoints[i].text = NULL;
 
+
   if (strchr (name, '\\')) {
     /* unusual case: 'name' is a filename */
-    write(1,"found \\\r\n",9);
+    fprintf(stderr,"found \\\r\n",9);
     _kitten_catalog = catread (name);
     if (_kitten_catalog)
       return (_kitten_catalog);
   }
 
+
   /* If the message _kitten_catalog file name does not contain a directory *
    * separator, then we need to try to locate the message _kitten_catalog. */
 
@@ -188,24 +140,26 @@
 
   lang = getenv ("LANG");
 
+
   if (lang == NULL) {
       /* printf("no lang= found\n"); */ /* not fatal, though */
       /* Return failure - we won't be able to locate the cat file */
       return (-1);
   }
 
-  if ( ( strlen(lang) < 2 ) ||
-       ( (strlen(lang) > 2) && (lang[2] != '-') ) ) {
+  if ( ( strlen(lang) < 2 ) ) {
       /* Return failure - we won't be able to locate the cat file */
       return (-1);
   }
 
+
   memcpy(catlang, lang, 2);
   /* we copy the full LANG value or the part before "-" if "-" found */
   catlang[2] = '\0';
 
   /* step through NLSPATH */
 
+
   nlsptr = getenv ("NLSPATH");
 
   if (nlsptr == NULL) {
@@ -216,6 +170,7 @@
 
   catfile[0] = '\0';
 
+
   while (nlsptr != NULL) {
       char *tok = strchr(nlsptr, ';');
       int toklen;
@@ -223,13 +178,13 @@
       if (tok == NULL)
         toklen = strlen(nlsptr); /* last segment */
       else
-        toklen = (int)(tok - nlsptr); /* segment terminated by ';' */
+        toklen = tok - nlsptr; /* segment terminated by ';' */
       
       /* catfile = malloc(toklen+1+strlen(name)+1+strlen(lang)+1); */
       /* Try to find the _kitten_catalog file in each path from NLSPATH */
 
       if ((toklen+6+strlen(name)) > sizeof(catfile)) {
-        write(1,"NLSPATH overflow\r\n",strlen("NLSPATH overflow\r\n"));
+        fprintf(stderr,"NLSPATH overflow\r\n");
         return 0; /* overflow in NLSPATH, should never happen */
       }
 
@@ -240,6 +195,7 @@
         strcat(catfile,catlang);
         strcat(catfile,"\\");
         strcat(catfile,name);
+
         _kitten_catalog = catread (catfile);
         if (_kitten_catalog)
 	  return (_kitten_catalog);
@@ -255,6 +211,7 @@
         if (_kitten_catalog)
 	  return (_kitten_catalog);
 
+
       /* Grab next tok for the next while iteration */
 
         nlsptr = tok;
@@ -275,13 +232,14 @@
 int catread (char *catfile)
 {
   int   file;				/* pointer to the catfile */
-  int   i;
+  unsigned int   i;
   char  *where;
   char  *tok;
 
   /* Get the whole catfile into a buffer and parse it */
   
-  file = open (catfile, O_RDONLY);
+  //file = _dos_open (catfile, O_RDONLY | O_TEXT, &file);
+  file = open (catfile, O_RDONLY | O_TEXT);
   if (file < 0) 
       /* Cannot open the file.  Return failure */
       return 0;
@@ -293,6 +251,7 @@
     catcontents[i] = '\0';
 
   /* Read the file into memory */
+  //_dos_read (file, catcontents, sizeof(catcontents)-1, &i);
   i = read (file, catcontents, sizeof(catcontents)-1);
 
   if ((i == sizeof(catcontents)-1) || (i < 1))
@@ -310,6 +269,7 @@
     tok = strchr(where, '\n');
 
     if (tok == NULL) { /* done? */
+      //_dos_close(file);
       close(file);
       return 1; /* success */
     }
@@ -507,18 +467,20 @@
 int get_char(int file) {
   int rval = -1;
 
+
   if (getlrem <= 0) { /* (re)init buffer */
+    //_dos_read(file, getlbuf, sizeof(getlbuf), &getlrem);
     getlrem = read(file, getlbuf, sizeof(getlbuf));
     if (getlrem <= 0)
       return -1; /* fail: read error / EOF */
     getlp = getlbuf; /* init pointer */
   }
 
-  if (getlrem > 0) { /* consume byte from buffer */
+  /* consume byte from buffer */
     rval = getlp[0];
     getlp++;
     getlrem--;
-  }
+
 
   return rval;
 }
@@ -531,38 +493,32 @@
  * be used for 2 files at the same time.
  */
 
-int get_line (int file, char *orig_str, int size)
+int get_line (int file, char *istr, int size)
 {
+  int success = 0;
   int ch;
-  char *str = orig_str;
+  char *str=istr;
 
   if ((size == 0) || (str == NULL)) { /* re-init get_line buffers */
     getlp = getlbuf;
     getlrem = -1;
+    lastcr = 0;
     return 0;
   }
 
   str[0] = '\0';
 
-  while (size > 0) {
+  while ( (size > 0) && (success == 0) ) {
     ch = get_char (file);
-    if (ch < 0) {
-      /* encountered EOF / read error, so no more content*/
-      str[0] = '\0';
-
-      /* test if the pointers are equal, there is not content in the buffer */
-      if(str == orig_str)
-        return 0;  /* fail, no more content */
-      
-      return 1; /* success */
-    }
+    if (ch < 0)
+      break; /* (can cause fail if no \n found yet) */
 
     if (ch == '\r')
       ch = get_char (file); /* ignore \r */
 
     str[0] = ch;
 
-    if ( (ch == '\n') || (ch == '\r') || (ch < 0) ) { /* done? */
+    if ( (ch == '\n') || (ch == '\r') ) { /* done? */
       str[0] = '\0';
       return 1; /* success */
     }
@@ -574,42 +530,7 @@
 
   str[0] = '\0'; /* terminate buffer */
 
-  return 0; /* fail, because the line is longer than the buffer? */
+  return success;
 
 }
 
-/*
- * input
- *   s          : input string to be parsed
- *   delimiters : start, intermediate and end
- *   responses  : output buffer (has to be long enough for num chars)
- *   num        : required number of responses
- *
- * return
- *   0 on failure
- *   1 on success
- */
-int kitten_extract_response(const char *s, const char *delimiters,
-                            char *responses, int num) {
-  int slen = strlen(s);
-  const char *p, *q;
-  int i;
-
-  /* Response parsing requires substring usually of the form '(%c/%c)' */
-  p = strchr(s, delimiters[0]);
-  if (!p)
-    return 0;
-
-  /* Each response requires letter followed by a delimiter e.g. 'Y/' or 'N)' */
-  if (p + 1 - s > slen - 2 * num)
-    return 0;
-
-  for (i = 0; i < num; i++) {
-    q = p + 2 + i * 2;
-    if (*q != delimiters[1] && *q != delimiters[2])
-      return 0;
-    responses[i] = *(p + 1 + i * 2);
-  }
-
-  return 1;
-}
diff -urwN so-x/kitten/kitten.h so-o/kitten/kitten.h
--- so-x/kitten/kitten.h	2023-03-30 15:49:16.570298866 +0300
+++ so-o/kitten/kitten.h	2023-01-08 21:46:45.741950934 +0300
@@ -29,45 +29,32 @@
 
 /* Data types */
 
-#if defined(__GNUC__)
-typedef int __attribute__((used)) nl_catd;
-#else
 typedef int nl_catd;
-#endif
 
 /* Functions */
-#ifdef NOCATS             /* #define NOCATS to disable completely */
-#define catgets(c,x,y,s) s
-#define catopen(x,y) 1
-#define catclose(x)
-#else
+
 #define catgets(catalog, set,message_number,message) kittengets(set,message_number,message)
 #define catopen(name,flag) kittenopen(name)
 #define catclose(catalog)  kittenclose()
-#endif
 
-const char *kittengets(int setnum, int msgnum, const char *message);
+
+char *  kittengets( int set_number, int message_number,char *message);
 nl_catd kittenopen(char *name);
 void    kittenclose (void);
 
 int get_line (int file, char *buffer, int size);
 
-int kitten_extract_response(const char *s, const char *delimiters,
-                            char *responses, int num);
-
-#if defined(__TURBOC__)
-int dos_open(char *filename, int mode);
-#define open(filename,mode) dos_open(filename,mode)
+//int dos_open(char *filename, int mode);
+//#define open(filename,mode) dos_open(filename,mode)
 
-int dos_read(int file, void *ptr, unsigned count);
-#define read(file, ptr, count) dos_read(file,ptr,count)
+//int dos_read(int file, void *ptr, unsigned count);
+//#define read(file, ptr, count) dos_read(file,ptr,count)
 
-int dos_write(int file, void *ptr, unsigned count);
-#define write(file, ptr, count) dos_write(file,ptr,count)
+//int dos_write(int file, void *ptr, unsigned count);
+//#define write(file, ptr, count) dos_write(file,ptr,count)
 
-void dos_close(int file);
-#define close(file) dos_close(file)
-#endif
+//void dos_close(int file);
+//#define close(file) dos_close(file)
 
 #ifdef __cplusplus
 }
diff -urwN so-x/src/sort.c so-o/src/sort.c
--- so-x/src/sort.c	2023-03-30 15:49:13.250226462 +0300
+++ so-o/src/sort.c	2023-03-30 16:18:59.272335581 +0300
@@ -1,7 +1,7 @@
 /*
 *    SORT - reads line of a file and sorts them in order
 *    Copyright  1995  Jim Lynch
-*    Updated 2003-2004 by Eric Auer: NLS for sort order, smaller binary.
+*    Updated 2003 by Eric Auer: NLS for sort order, smaller binary.
 *
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
@@ -17,7 +17,6 @@
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
-#include <fcntl.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
@@ -25,15 +24,8 @@
 #include "../kitten/kitten.h"
 #include "../tnyprntf/tnyprntf.h"
 
-#if !defined(__TURBOC__)
-#include <unistd.h>
-#endif
-
-#if defined(__GNUC__)
-#include <libi86/stdlib.h>
-#define far __far
-#endif
-
+#include <fcntl.h> /* O_RDONLY */
+#include <io.h>    /* write */
 #define StdIN  0
 #define StdOUT 1
 #define StdERR 2
@@ -42,24 +34,12 @@
 #include <malloc.h>
 #endif
 
-#if defined(__GNUC__)
-/* Naive implementation of atol(), only decimal digits allowed, no signs */
-static long minimal_atol(const char *s) {
-    long val;
-    const char *p;
-
-    for (val = 0, p = s; *p; p++) {
-        if (*p == ' ')
-            continue;
-        if (*p < '0' || *p > '9')
-            break;
-        val *= 10;
-        val += *p - '0';
-    }
+#ifdef __OS2__
+#define INCL_DOSERRORS
+//#define INCL_VIO
 
-    return val;
-}
-#define atol(s) minimal_atol(s)
+//#include <osfree.h>             // Include file for osfree
+#include <cmd_shared.h>         // Include file for cmd tools
 #endif
 
 #ifdef __MSDOS__
@@ -91,14 +71,6 @@
 Upcase string: 21.6522.ds:dx (string terminated by 0 byte)
 */
 
-/* actually TINY was worst, because of non-malloc list[] array! */
-#ifndef __TINY__		/* tiny model (.com) has no stack setting */
-unsigned _stklen = 16383;	/* use bigger stack, for stdlib qsort...  */
-#endif				/* default stack size is only 4096 bytes  */
-/* for NORMAL (avg. 40 char/line) 10k line text, 6-8k of stack is ok */
-/* on the other hand, 1400 "nnnn\tx" lines sorted /+5 take 32k stack */
-/* (with 16k stack, you can "sort" up to 700 identical lines, etc.)  */
-
 unsigned char far * collate;
 #endif
 
@@ -107,31 +79,24 @@
 #ifndef MAXPATH
 #define MAXPATH 80
 #endif
-
-/* Optimizations 7/2004: sort bigger files both with COM and EXE version  -ea */
-#ifdef __TINY__	/* .com: 8k+1k kitten, 7k*2 list array, ca. 28k max file size */
-#define MAXRECORDS  7000	/* maximum number of records that can be
-				 * sorted: we use an array of N pointers! */
+#define MAXRECORDS  10000       /* maximum number of records that can be
+                                 * sorted */
 #define MAXLEN	1023		/* maximum record length */
-#else				/* if far pointers */
-#define MAXRECORDS 12000	/* malloc limited to 64k -> max 16k items */
-#define MAXLEN	8191		/* maximum record length */
-#endif				/* !12k items means 48k for list[] alone! */
-/* first 10k lines of Ralf Browns Interrupt List 61 are 382701 bytes, we */
-/* can SORT them with "largest executable program size 626k (641,424)".  */
-/* Limit for 626k seems to be - with 12k items and 12k stack - 400000 bytes */
-
 
 int             rev;		/* reverse flag */
-#ifdef __MSDOS__
 int		nls;		/* NLS use flag */
-#endif
 int             help;		/* help flag */
 int             sortcol;	/* sort column */
 int             err = 0;	/* error counter */
 
+void
+WriteString(char *s, int handle) /* much smaller than fputs */
+{
+  write(handle, s, strlen(s));
+}
+
 int
-cmpr(const void *a, const void *b)
+cmpr(void *a, void *b)
 {
     unsigned char *A, *B, *C;
 
@@ -139,14 +104,14 @@
     B = *(unsigned char **) b;
 
     if (sortcol > 0) { /* "sort from column... " */
-	if (strlen((char *)A) > sortcol)
+        if (strlen(A) > sortcol)
 	    A += sortcol;
 	else
-	    A = (unsigned char *)"";
-	if (strlen((char *)B) > sortcol)
+            A = "";
+        if (strlen(B) > sortcol)
 	    B += sortcol;
 	else
-	    B = (unsigned char *)"";
+            B = "";
     }
     
     if (rev) { /* reverse sort: swap strings */
@@ -169,7 +134,7 @@
         return 1;
     } else {
 #endif
-        return strcmp((char *)A, (char *)B);
+        return strcmp(A, B);
 #ifdef __MSDOS__
     }
 #endif
@@ -178,31 +143,34 @@
 void
 usage(nl_catd cat)
 {
-#if !defined(__GNUC__)
     if (cat != cat) {}; /* avoid unused argument error in kitten */
-#endif
   
-    PRINTF("FreeDOS SORT v1.4\n");	/* *** VERSION *** */
+    WriteString("SORT: V1.2\r\n", StdERR);
+
     if (err)
-        PRINTF(catgets(cat, 2, 0, "Invalid parameter\n"));
-    PRINTF(catgets(cat, 0, 0, "    SORT [/R] [/+num] [/A] [/?] [file]\n"));
-    PRINTF(catgets(cat, 0, 1, "    /R    Reverse order\n"));
-    PRINTF(catgets(cat, 0, 2, "    /A    Sort by ASCII, ignore COUNTRY\n"));
-    PRINTF(catgets(cat, 0, 3, "    /+num start sorting with column num, 1 based\n"));
-    PRINTF(catgets(cat, 0, 4, "    /?    help\n"));
+        WriteString(catgets(cat, 2, 0, "Invalid parameter\r\n"), StdERR);
+
+    cmd_ShowSystemMessage(cmd_MSG_SORT_HELP,0);
 
+#if 0
+    WriteString(catgets(cat, 0, 0, "    SORT [/R] [/+num] [/?]\r\n"), StdERR);
+    WriteString(catgets(cat, 0, 1, "    /R    Reverse order\r\n"), StdERR);
+#ifdef __MSDOS__
+    WriteString(catgets(cat, 0, 2, "    /N    Enable NLS support\r\n"), StdERR);
+#endif
+    WriteString(catgets(cat, 0, 3,
+        "    /+num start sorting with column num, 1 based\r\n"), StdERR);
+    WriteString(catgets(cat, 0, 4, "    /?    help\r\n"), StdERR);
+#endif
 }
 
+typedef int (*cmpr_t)(const void *, const void *);
+
 int main(int argc, char **argv)
 {
     char	filename[MAXPATH];
-#ifdef __TINY__
     char	temp[MAXLEN + 1];
-    char	*list[MAXRECORDS]; /* eats up lots of stack! */
-#else
-    char	*temp;
-    char        **list;
-#endif
+    char        *list[MAXRECORDS];
     char	*cp;	/* option character pointer */
     int		nr;
     int		i;
@@ -225,10 +193,7 @@
     sortcol = 0;
     strcpy(filename, "");
     rev = 0;
-#ifdef __MSDOS__
-    nls = 1;	/* *** changed to default ON 7/2004 *** */
-#endif
-
+    nls = 0;
     while (--argc) {
 	if (*(cp = *++argv) == '/') {
 	    switch (cp[1]) {
@@ -239,11 +204,32 @@
 #ifdef __MSDOS__
 	    case 'N':
 	    case 'n':
-	    	nls = 1;	/* is the new default anyway ... */
-		break;
-	    case 'A':		/* use strict  ASCII  sort order */
-	    case 'a':
-	    	nls = 0;	/* new option 7/2004: suppress NLS collate */
+                if ( ((_osmajor >= 3) && (_osminor >= 3)) ||
+                     (_osmajor > 3) ) {
+                    dosr.x.ax = 0x6506; /* get collate table */
+                    dosr.x.bx = 0xffff; /* default codepage  */
+                    dosr.x.dx = 0xffff; /* default country   */
+                    dosr.x.cx = 5;      /* buffer size   */
+                    doss.es = FP_SEG(&collbuf);
+                    dosr.x.di = FP_OFF(&collbuf);
+                    intdosx(&dosr,&dosr,&doss);
+                    if ((dosr.x.flags & 1) == 1) {
+                        WriteString(catgets(cat, 2, 1,
+/* catgets ... */           "Error reading NLS collate table\r\n"),
+                            StdERR);
+                        nls = 0;
+                    } else {
+                        /* ... CX is returned as table length ... */
+                        collate = collbuf.content; /* table pointer */
+                        collate++; /* skip leading word, which is */
+                        collate++; /* not part of the table */
+                        nls = 1;
+                    }
+                } else {
+                    WriteString(catgets(cat, 2, 2,
+/* catgets ... */       "Only DOS 3.3 or newer supports NLS!\r\n"),
+                        StdERR);
+                }
 		break;
 #endif
 	    case '?':
@@ -252,7 +238,7 @@
 		help = 1;
 		break;
 	    case '+':
-		sortcol = atol(cp + 2);
+                sortcol = atoi(cp + 1);
 		if (sortcol)
 		    sortcol--;
 		break;
@@ -263,51 +249,19 @@
 	    strcpy(filename, *argv);
 	}
     }
-
     if (err || help) {
 	usage(cat);
 	catclose(cat);
 	exit(1);
     }
-
-/* *** following was switch case "N" (in above parse) before 7/2004 *** */
-#ifdef __MSDOS__
-    if (nls) {
-        if ( ((_osmajor >= 3) && (_osminor >= 3)) || (_osmajor > 3) ) {
-            dosr.x.ax = 0x6506; /* get collate table */
-            dosr.x.bx = 0xffff; /* default codepage  */
-            dosr.x.dx = 0xffff; /* default country   */
-            dosr.x.cx = 5;      /* buffer size   */
-            doss.es = FP_SEG(&collbuf);
-            dosr.x.di = FP_OFF(&collbuf);
-            intdosx(&dosr,&dosr,&doss);
-            if ((dosr.x.cflag) == 1) {
-                PRINTF(catgets(cat, 2, 1, "Error reading NLS collate table\n"));
-                nls = 0;
-            } else {
-                /* ... CX is returned as table length ... */
-                collate = collbuf.content; /* table pointer */
-                collate++; /* skip leading word, which is */
-                collate++; /* not part of the table */
- 		/* "nls on" accepted now */
-                /* printf("NLS SORT ENABLED %d\n",dosr.x.cx); */
-	    }
-        } else {
-           PRINTF(catgets(cat, 2, 2, "Only DOS 3.3 or newer supports NLS!\n"));
-           nls = 0;	/* *** disable NLS sort order *** */
-        }
-    } else {
-        /* accepting "nls off" is easy ;-) */
-        /* printf("NLS SORT DISABLED AT USER REQUEST\n"); */
-    }
-#endif
-/* *** end of former switch case "N" *** */
-
     fi = StdIN;			/* just in case */
     if (strlen(filename)) {
 	if ((fi = open(filename, O_RDONLY)) == -1) {
 	    /* was: ... fopen(...,"r") ... == NULL ... */
-	    PRINTF(catgets(cat, 2, 3, "SORT: Can't open '%s' for read\n"), filename);
+            WriteString(catgets(cat, 2, 3, "SORT: Can't open "), StdERR);
+            WriteString(filename,StdERR);
+            WriteString(catgets(cat, 2, 4, " for read\r\n"), StdERR);
+            /* avoided 1.5k-2k overhead of *printf()... */
 	    catclose(cat);
 	    exit(2);
 	}
@@ -315,14 +269,6 @@
     
     (void)get_line(fi, NULL, 0); /* initialize buffers */
 
-#ifndef __TINY__
-    nr = -1;
-    list = (char **) malloc(MAXRECORDS * sizeof(char *));
-    if (list == NULL) goto out_of_mem;
-    temp = (char *) malloc(MAXLEN + 1);
-    if (temp == NULL) goto out_of_mem;
-#endif
-    
     for (nr = 0; nr < MAXRECORDS; nr++) {
 	if (!get_line(fi, temp, MAXLEN))
 	    /* was: fgets(temp, MAXLEN, fi) == NULL */
@@ -330,30 +276,26 @@
 	list[nr] = (char *) malloc(strlen(temp) + 1);
 	    /* malloc might have big overhead, but we cannot avoid it */
 	if (list[nr] == NULL) {
-	    out_of_mem:
-	    PRINTF(catgets(cat, 2, 5, "SORT: Insufficient memory\n"));
+            WriteString(catgets(cat, 2, 5, "SORT: Insufficient memory\r\n"),
+                StdERR);
 	    catclose(cat);
 	    exit(3);
 	}
 	strcpy(list[nr], temp);
     }
-#ifndef __TINY__
-    /* free(temp); */	/* doesn't really help, qsort doesn't malloc anything */
-    /* not using free() at all saves 0.7k (UPXed 0.3k) binary size... */
-#endif
-
     if (nr == MAXRECORDS) {
-	PRINTF(catgets(cat, 2, 6, "SORT: number of records exceeds maximum\n"));
+        WriteString(catgets(cat, 2, 6,
+            "SORT: number of records exceeds maximum\r\n"), /* catgets ... */
+            StdERR);
 	catclose(cat);
 	exit(4);
     }
-
-    qsort((void *) list, nr, sizeof(char *), cmpr);	/* *main action* */
-
+    qsort((void *) list, nr, sizeof(char *), (cmpr_t)cmpr);
     for (i = 0; i < nr; i++) {
-        write(StdOUT, list[i], strlen(list[i]));
-        write(StdOUT, "\n", 1);
+        WriteString(list[i], StdOUT);
+        WriteString("\r\n",StdOUT);
     }
     catclose(cat);
     return 0;
 }
+
